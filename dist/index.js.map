{"version":3,"sources":["../src/index.ts","../src/library/Database/index.ts"],"sourcesContent":["/**\n * Copyright © Adobe, Inc. All rights reserved.\n */\n\nexport * from \"./library\"\n","/**\n * Copyright © Adobe, Inc. All rights reserved.\n */\n\nimport { Connection, ExecuteResult } from '../Connection/types';\nimport { Model, Options, Attribute } from './types';\n\nclass Database {\n    private connection: Connection;\n\n    constructor(connection: Connection) {\n        this.connection = connection;\n    }\n\n    define(name: string, attributes: Record<string, Attribute>): void {\n        (this as any)[name] = {\n            name: name,\n            attributes: attributes,\n        };\n    }\n\n    async createTable(model: Model): Promise<void> {\n        const columns = Object.entries(model.attributes)\n            .map(([_, attr]) => `${attr.name} ${attr.type}`)\n            .join(', ');\n        const query = `CREATE TABLE ${model.name} (${columns})`;\n        await this.connection.execute({ sql: query, args: [] });\n    }\n\n    async select(model: Model, options: Options = {}): Promise<any[]> {\n        const attributes = options.attributes || Object.keys(model.attributes).map(key => model.attributes[key].name);\n        const where = options.where ? `WHERE ${options.where}` : '';\n        const query = `SELECT ${attributes.join(', ')} FROM ${model.name} ${where}`;\n        const result: ExecuteResult = await this.connection.execute({ sql: query, args: [] });\n        return result.rows;\n    }\n\n    async insert(model: Model, data: Record<string, any>): Promise<void> {\n        const attributes = Object.keys(data);\n        const values = attributes.map(attribute => '?').join(', ');\n        const query = `INSERT INTO ${model.name} (${attributes.join(', ')}) VALUES (${values})`;\n        await this.connection.execute({ sql: query, args: Object.values(data) });\n    }\n\n    async update(model: Model, data: Record<string, any>, options: Options = {}): Promise<void> {\n        const attributes = Object.keys(data);\n        const values = attributes.map(attribute => `${attribute} = ?`).join(', ');\n        const where = options.where ? `WHERE ${options.where}` : '';\n        const query = `UPDATE ${model.name} SET ${values} ${where}`;\n        await this.connection.execute({ sql: query, args: Object.values(data) });\n    }\n\n    async delete(model: Model, options: Options = {}): Promise<void> {\n        const where = options.where ? `WHERE ${options.where}` : '';\n        const query = `DELETE FROM ${model.name} ${where}`;\n        await this.connection.execute({ sql: query, args: [] });\n    }\n}\n\nexport default Database;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACOA,IAAM,WAAN,MAAe;AAAA,EAGX,YAAY,YAAwB;AAChC,SAAK,aAAa;AAAA,EACtB;AAAA,EAEA,OAAO,MAAc,YAA6C;AAC9D,IAAC,KAAa,IAAI,IAAI;AAAA,MAClB;AAAA,MACA;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,MAAM,YAAY,OAA6B;AAC3C,UAAM,UAAU,OAAO,QAAQ,MAAM,UAAU,EAC1C,IAAI,CAAC,CAAC,GAAG,IAAI,MAAM,GAAG,KAAK,IAAI,IAAI,KAAK,IAAI,EAAE,EAC9C,KAAK,IAAI;AACd,UAAM,QAAQ,gBAAgB,MAAM,IAAI,KAAK,OAAO;AACpD,UAAM,KAAK,WAAW,QAAQ,EAAE,KAAK,OAAO,MAAM,CAAC,EAAE,CAAC;AAAA,EAC1D;AAAA,EAEA,MAAM,OAAO,OAAc,UAAmB,CAAC,GAAmB;AAC9D,UAAM,aAAa,QAAQ,cAAc,OAAO,KAAK,MAAM,UAAU,EAAE,IAAI,SAAO,MAAM,WAAW,GAAG,EAAE,IAAI;AAC5G,UAAM,QAAQ,QAAQ,QAAQ,SAAS,QAAQ,KAAK,KAAK;AACzD,UAAM,QAAQ,UAAU,WAAW,KAAK,IAAI,CAAC,SAAS,MAAM,IAAI,IAAI,KAAK;AACzE,UAAM,SAAwB,MAAM,KAAK,WAAW,QAAQ,EAAE,KAAK,OAAO,MAAM,CAAC,EAAE,CAAC;AACpF,WAAO,OAAO;AAAA,EAClB;AAAA,EAEA,MAAM,OAAO,OAAc,MAA0C;AACjE,UAAM,aAAa,OAAO,KAAK,IAAI;AACnC,UAAM,SAAS,WAAW,IAAI,eAAa,GAAG,EAAE,KAAK,IAAI;AACzD,UAAM,QAAQ,eAAe,MAAM,IAAI,KAAK,WAAW,KAAK,IAAI,CAAC,aAAa,MAAM;AACpF,UAAM,KAAK,WAAW,QAAQ,EAAE,KAAK,OAAO,MAAM,OAAO,OAAO,IAAI,EAAE,CAAC;AAAA,EAC3E;AAAA,EAEA,MAAM,OAAO,OAAc,MAA2B,UAAmB,CAAC,GAAkB;AACxF,UAAM,aAAa,OAAO,KAAK,IAAI;AACnC,UAAM,SAAS,WAAW,IAAI,eAAa,GAAG,SAAS,MAAM,EAAE,KAAK,IAAI;AACxE,UAAM,QAAQ,QAAQ,QAAQ,SAAS,QAAQ,KAAK,KAAK;AACzD,UAAM,QAAQ,UAAU,MAAM,IAAI,QAAQ,MAAM,IAAI,KAAK;AACzD,UAAM,KAAK,WAAW,QAAQ,EAAE,KAAK,OAAO,MAAM,OAAO,OAAO,IAAI,EAAE,CAAC;AAAA,EAC3E;AAAA,EAEA,MAAM,OAAO,OAAc,UAAmB,CAAC,GAAkB;AAC7D,UAAM,QAAQ,QAAQ,QAAQ,SAAS,QAAQ,KAAK,KAAK;AACzD,UAAM,QAAQ,eAAe,MAAM,IAAI,IAAI,KAAK;AAChD,UAAM,KAAK,WAAW,QAAQ,EAAE,KAAK,OAAO,MAAM,CAAC,EAAE,CAAC;AAAA,EAC1D;AACJ;AAEA,IAAO,mBAAQ;","names":[]}